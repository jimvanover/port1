<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_travel_applicat.ClientDateTimeUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>ClientDateTimeUtils</name>
        <script><![CDATA[var ClientDateTimeUtils = Class.create();
ClientDateTimeUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {


	dateDiff: function() {
		var from = this.getParameter('sysparm_from'); //First Date-Time Field
		var to = this.getParameter('sysparm_to'); // Second Date-Time Field

		var firstDT = from + ' 00:00:00';
		var secondDT = to + ' 00:00:00';

		var gdt1 = new GlideDateTime(firstDT);
		var gdt2 = new GlideDateTime(secondDT);

		var dur = GlideDateTime.subtract(gdt2, gdt1); //the difference between gdt1 and gdt2
		return (dur.getNumericValue() / (86400 * 1000));


	},

//Diff the amount of time between two different Date/Time fields
//params = sysparm_fdt (the first date/time field), sysparm_sdt (second date/time field), sysparm_difftype (time based format to return result. See "_calcDateDiff" function comments)
	getDateTimeDiff: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var secondDT = this.getParameter('sysparm_sdt'); // Second Date-Time Field
		var diffTYPE = this.getParameter('sysparm_difftype'); // Date-Time Type to return the answer as. Can be second, minute, hour, day
		var diff = gs.dateDiff(firstDT, secondDT, true);
		var timediff = this._calcDateDiff(diffTYPE, diff);
//return "getDateTimeDiff: FIRST DT: " + firstDT + " -SECOND DT: " + secondDT + " -DIFFTYPE: " + diffTYPE + " -TIME DIFF: " + timediff;
		return timediff;
	},

//Takes your date/time field and returns the amount of time before now. A positive is time before now, a negative number is after now.
//params = sysparm_fdt (the first date/time field), sysparm_difftype (time based format to return result. See "_calcDateDiff" function comments)
	getDateTimeBeforeNow: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var diffTYPE = this.getParameter('sysparm_difftype'); // Date-Time Type to return the answer as. Can be second, minute, hour, day
		var diff = gs.dateDiff(firstDT, gs.nowDateTime(), true);
		var timediff = this._calcDateDiff(diffTYPE, diff);
//return "getDateTimeBeforeNow: FIRST DT: " + firstDT + " -DIFFTYPE: " + diffTYPE + " -TIME DIFF: " + timediff;
		return timediff;
	},

//Returns true if it is before now, and false if it is after now.
//params = sysparm_fdt (the first date/time field)
	getDateTimeBeforeNowBool: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var diff = gs.dateDiff(firstDT, gs.nowDateTime(), true);
		var answer = '';
		if (diff >= 0) {
			answer = 'true';
		} else {
			answer = 'false';
		}
		return answer;
	},

//Returns the Date/Time of right now.
	getNowDateTime: function() {
		var now = gs.nowDateTime(); //Now Date/Time
		return now;
	},

//Returns the Date right now.
	getNowDate: function() {
		var now = GlideDate();
		; //Now Date
		return now.getLocalDate();
	},

//Returns the Time of right now.
	getNowTime: function() {
		var now = GlideTime();
		; //Now Time
		var modnow = now.getLocalTime().toString().split(' ');
		return modnow[1];
	},

//Takes a date/time field and adds time to it.
//params = sysparm_fdt (the first date/time field), sysparm_addtype (type of time to add - second, minute, hour, day, week, month, year), sysparm_addtime (amount of time to add based on the type).
	addDateTimeAmount: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var addTYPE = this.getParameter('sysparm_addtype'); //What to add - second (addSeconds()), minute (need to add conversion), hour (need to add conversion), day (addDays()), week (addWeeks()), month (addMonths()), year (addYears())
		var addTIME = this.getParameter('sysparm_addtime'); //How much time to add
		var day = GlideDateTime(firstDT);

		if (addTYPE == 'second') {
			day.addSeconds(addTIME);
		} else if (addTYPE == 'minute') {
			day.addSeconds(addTIME * 60);
		} else if (addTYPE == 'hour') {
			day.addSeconds(addTIME * (60 * 60));
		} else if (addTYPE == 'day') {
			day.addDays(addTIME);
		} else if (addTYPE == 'week') {
			day.addWeeks(addTIME);
		} else if (addTYPE == 'month') {
			day.addMonths(addTIME);
		} else if (addTYPE == 'year') {
			day.addYears(addTIME);
		} else {
			day.addDays(addTIME);
		}

//return "First Date: " + firstDT + " -Time to Add: " + addTIME + " -Add Type: " + addTYPE + " -Added Time: " + day;
		return day;
	},

//Takes a glide date field and adds time to it.
//params = sysparm_fdt (the first date/time field), sysparm_addtype (type of time to add - day, week, month, year),sysparm_addtime (amount of time to add based on the type).
	addDateAmount: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date Field
		var addTYPE = this.getParameter('sysparm_addtype'); //What to add - day (addDays()), week (addWeeks()), month (addMonths()), year (addYears())
		var addTIME = this.getParameter('sysparm_addtime'); //How much time to add
		var day = GlideDate();
		day.setValue(firstDT);

		if (addTYPE == 'day') {
			day.addDays(addTIME);
		} else if (addTYPE == 'week') {
			day.addWeeks(addTIME);
		} else if (addTYPE == 'month') {
			day.addMonths(addTIME);
		} else if (addTYPE == 'year') {
			day.addYears(addTIME);
		} else {
			day.addDays(addTIME);
		}

//return "First Date: " + firstDT + " -Time to Add: " + addTIME + " -Add Type: " + addTYPE + " -Added Time: " + day;
		return day;
	},

	addTimeAmount: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var addTYPE = this.getParameter('sysparm_addtype'); //What
		var addTIME = this.getParameter('sysparm_addtime'); //How much time to add
		var time = GlideTime();
		time.setValue(firstDT);

		if (addTYPE == 'second') {
			time.addSeconds(addTIME);
		} else if (addTYPE == 'minute') {
			time.addSeconds(addTIME * 60);
		} else if (addTYPE == 'hour') {
			time.addSeconds(addTIME * (60 * 60));
		} else {
			time.addSeconds(addTIME);
		}

		var modtime = time.toString().split(' ');
//return "First Date: " + firstDT + " -Time to Add: " + addTIME + " -Add Type: " + addTYPE + " -Added Time: " + time;
		return modtime[1];
	},

//Private function to calculate the date difference return result in second, minute, hour, day.
	_calcDateDiff: function(diffTYPE, seconds) {
		var thisdiff;
		if (diffTYPE == "day") {
			thisdiff = seconds / 86400;
		} else if (diffTYPE == "hour") {
			thisdiff = seconds / 3600;
		} else if (diffTYPE == "minute") {
			thisdiff = seconds / 60;
		} else if (diffTYPE == "second") {
			thisdiff = seconds;
		} else {
			thisdiff = seconds;
		}
		return thisdiff;
	}


});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-10-08 00:00:15</sys_created_on>
        <sys_id>5392392a73500010957080844ff6a745</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>ClientDateTimeUtils</sys_name>
        <sys_package display_value="Travel Application" source="sn_travel_applicat">402be69673000010957080844ff6a740</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Travel Application">402be69673000010957080844ff6a740</sys_scope>
        <sys_update_name>sys_script_include_5392392a73500010957080844ff6a745</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-10-08 00:29:44</sys_updated_on>
    </sys_script_include>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Travel Application">402be69673000010957080844ff6a740</application>
        <file_path/>
        <instance_id>fb8f87bedbfae600536af5b0cf9619e1</instance_id>
        <instance_name>hackathon209</instance_name>
        <name>sys_script_include_5392392a73500010957080844ff6a745</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;sn_travel_applicat.ClientDateTimeUtils&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;ClientDateTimeUtils&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var ClientDateTimeUtils = Class.create();
ClientDateTimeUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {


	dateDiff: function() {
		var from = this.getParameter('sysparm_from'); //First Date-Time Field
		var to = this.getParameter('sysparm_to'); // Second Date-Time Field

		var firstDT = from + ' 00:00:00';
		var secondDT = to + ' 00:00:00';

		var gdt1 = new GlideDateTime(firstDT);
		var gdt2 = new GlideDateTime(secondDT);

		var dur = GlideDateTime.subtract(gdt2, gdt1); //the difference between gdt1 and gdt2
		return (dur.getNumericValue() / (86400 * 1000));


	},

//Diff the amount of time between two different Date/Time fields
//params = sysparm_fdt (the first date/time field), sysparm_sdt (second date/time field), sysparm_difftype (time based format to return result. See "_calcDateDiff" function comments)
	getDateTimeDiff: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var secondDT = this.getParameter('sysparm_sdt'); // Second Date-Time Field
		var diffTYPE = this.getParameter('sysparm_difftype'); // Date-Time Type to return the answer as. Can be second, minute, hour, day
		var diff = gs.dateDiff(firstDT, secondDT, true);
		var timediff = this._calcDateDiff(diffTYPE, diff);
//return "getDateTimeDiff: FIRST DT: " + firstDT + " -SECOND DT: " + secondDT + " -DIFFTYPE: " + diffTYPE + " -TIME DIFF: " + timediff;
		return timediff;
	},

//Takes your date/time field and returns the amount of time before now. A positive is time before now, a negative number is after now.
//params = sysparm_fdt (the first date/time field), sysparm_difftype (time based format to return result. See "_calcDateDiff" function comments)
	getDateTimeBeforeNow: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var diffTYPE = this.getParameter('sysparm_difftype'); // Date-Time Type to return the answer as. Can be second, minute, hour, day
		var diff = gs.dateDiff(firstDT, gs.nowDateTime(), true);
		var timediff = this._calcDateDiff(diffTYPE, diff);
//return "getDateTimeBeforeNow: FIRST DT: " + firstDT + " -DIFFTYPE: " + diffTYPE + " -TIME DIFF: " + timediff;
		return timediff;
	},

//Returns true if it is before now, and false if it is after now.
//params = sysparm_fdt (the first date/time field)
	getDateTimeBeforeNowBool: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var diff = gs.dateDiff(firstDT, gs.nowDateTime(), true);
		var answer = '';
		if (diff &gt;= 0) {
			answer = 'true';
		} else {
			answer = 'false';
		}
		return answer;
	},

//Returns the Date/Time of right now.
	getNowDateTime: function() {
		var now = gs.nowDateTime(); //Now Date/Time
		return now;
	},

//Returns the Date right now.
	getNowDate: function() {
		var now = GlideDate();
		; //Now Date
		return now.getLocalDate();
	},

//Returns the Time of right now.
	getNowTime: function() {
		var now = GlideTime();
		; //Now Time
		var modnow = now.getLocalTime().toString().split(' ');
		return modnow[1];
	},

//Takes a date/time field and adds time to it.
//params = sysparm_fdt (the first date/time field), sysparm_addtype (type of time to add - second, minute, hour, day, week, month, year), sysparm_addtime (amount of time to add based on the type).
	addDateTimeAmount: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var addTYPE = this.getParameter('sysparm_addtype'); //What to add - second (addSeconds()), minute (need to add conversion), hour (need to add conversion), day (addDays()), week (addWeeks()), month (addMonths()), year (addYears())
		var addTIME = this.getParameter('sysparm_addtime'); //How much time to add
		var day = GlideDateTime(firstDT);

		if (addTYPE == 'second') {
			day.addSeconds(addTIME);
		} else if (addTYPE == 'minute') {
			day.addSeconds(addTIME * 60);
		} else if (addTYPE == 'hour') {
			day.addSeconds(addTIME * (60 * 60));
		} else if (addTYPE == 'day') {
			day.addDays(addTIME);
		} else if (addTYPE == 'week') {
			day.addWeeks(addTIME);
		} else if (addTYPE == 'month') {
			day.addMonths(addTIME);
		} else if (addTYPE == 'year') {
			day.addYears(addTIME);
		} else {
			day.addDays(addTIME);
		}

//return "First Date: " + firstDT + " -Time to Add: " + addTIME + " -Add Type: " + addTYPE + " -Added Time: " + day;
		return day;
	},

//Takes a glide date field and adds time to it.
//params = sysparm_fdt (the first date/time field), sysparm_addtype (type of time to add - day, week, month, year),sysparm_addtime (amount of time to add based on the type).
	addDateAmount: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date Field
		var addTYPE = this.getParameter('sysparm_addtype'); //What to add - day (addDays()), week (addWeeks()), month (addMonths()), year (addYears())
		var addTIME = this.getParameter('sysparm_addtime'); //How much time to add
		var day = GlideDate();
		day.setValue(firstDT);

		if (addTYPE == 'day') {
			day.addDays(addTIME);
		} else if (addTYPE == 'week') {
			day.addWeeks(addTIME);
		} else if (addTYPE == 'month') {
			day.addMonths(addTIME);
		} else if (addTYPE == 'year') {
			day.addYears(addTIME);
		} else {
			day.addDays(addTIME);
		}

//return "First Date: " + firstDT + " -Time to Add: " + addTIME + " -Add Type: " + addTYPE + " -Added Time: " + day;
		return day;
	},

	addTimeAmount: function() {
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var addTYPE = this.getParameter('sysparm_addtype'); //What
		var addTIME = this.getParameter('sysparm_addtime'); //How much time to add
		var time = GlideTime();
		time.setValue(firstDT);

		if (addTYPE == 'second') {
			time.addSeconds(addTIME);
		} else if (addTYPE == 'minute') {
			time.addSeconds(addTIME * 60);
		} else if (addTYPE == 'hour') {
			time.addSeconds(addTIME * (60 * 60));
		} else {
			time.addSeconds(addTIME);
		}

		var modtime = time.toString().split(' ');
//return "First Date: " + firstDT + " -Time to Add: " + addTIME + " -Add Type: " + addTYPE + " -Added Time: " + time;
		return modtime[1];
	},

//Private function to calculate the date difference return result in second, minute, hour, day.
	_calcDateDiff: function(diffTYPE, seconds) {
		var thisdiff;
		if (diffTYPE == "day") {
			thisdiff = seconds / 86400;
		} else if (diffTYPE == "hour") {
			thisdiff = seconds / 3600;
		} else if (diffTYPE == "minute") {
			thisdiff = seconds / 60;
		} else if (diffTYPE == "second") {
			thisdiff = seconds;
		} else {
			thisdiff = seconds;
		}
		return thisdiff;
	}


});]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-10-08 00:00:15&lt;/sys_created_on&gt;&lt;sys_id&gt;5392392a73500010957080844ff6a745&lt;/sys_id&gt;&lt;sys_mod_count&gt;16&lt;/sys_mod_count&gt;&lt;sys_name&gt;ClientDateTimeUtils&lt;/sys_name&gt;&lt;sys_package display_value="Travel Application" source="sn_travel_applicat"&gt;402be69673000010957080844ff6a740&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Travel Application"&gt;402be69673000010957080844ff6a740&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_5392392a73500010957080844ff6a745&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-10-08 00:29:44&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
        <payload_hash>1178698542</payload_hash>
        <record_name>ClientDateTimeUtils</record_name>
        <reverted_from/>
        <source>7e4e522adb580090f33dae5a48961920</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>arthur.oliveira</sys_created_by>
        <sys_created_on>2019-10-08 03:10:43</sys_created_on>
        <sys_id>1d5e162adb580090f33dae5a4896194f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>16da958fa080000001</sys_recorded_at>
        <sys_updated_by>arthur.oliveira</sys_updated_by>
        <sys_updated_on>2019-10-08 03:10:43</sys_updated_on>
        <type>Script Include</type>
        <update_guid>d95e162a7d580090ee9677be28a89a4f</update_guid>
        <update_guid_history>d95e162a7d580090ee9677be28a89a4f:1178698542</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>joel.andersson</sys_created_by>
        <sys_created_on>2019-10-16 08:42:15</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>d4cd0b6dc80a49a4979db4d6e10b6809</sys_id>
        <sys_metadata>5392392a73500010957080844ff6a745</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ClientDateTimeUtils</sys_name>
        <sys_package display_value="Travel Application" source="sn_travel_applicat">402be69673000010957080844ff6a740</sys_package>
        <sys_parent/>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Travel Application">402be69673000010957080844ff6a740</sys_scope>
        <sys_scope_delete/>
        <sys_update_name>sys_script_include_5392392a73500010957080844ff6a745</sys_update_name>
        <sys_update_version display_value="sys_script_include_5392392a73500010957080844ff6a745">1d5e162adb580090f33dae5a4896194f</sys_update_version>
        <sys_updated_by>joel.andersson</sys_updated_by>
        <sys_updated_on>2019-10-16 08:42:15</sys_updated_on>
    </sys_metadata_delete>
</record_update>
